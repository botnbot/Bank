from unittest.mock import patch
from src.reports import spending_by_category
from src.main import df_to_func
from datetime import datetime

# Ожидаемый результат
expected_result = [
    {
        "Дата операции": "18.06.2018 00:00:00",
        "Дата платежа": "20.06.2018",
        "Номер карты": "*7197",
        "Статус": "OK",
        "Сумма операции": -49.0,
        "Валюта операции": "RUB",
        "Сумма платежа": -49.0,
        "Валюта платежа": "RUB",
        "Кэшбэк": None,
        "Категория": "Дом и ремонт",
        "MCC": 5211.0,
        "Описание": "Kvartal Stroy",
        "Бонусы (включая кэшбэк)": 0,
        "Округление на инвесткопилку": 0,
        "Сумма операции с округлением": 49.0
    },
    {
        "Дата операции": "31.05.2018 19:18:56",
        "Дата платежа": "01.06.2018",
        "Номер карты": "*7197",
        "Статус": "OK",
        "Сумма операции": -2000.0,
        "Валюта операции": "RUB",
        "Сумма платежа": -2000.0,
        "Валюта платежа": "RUB",
        "Кэшбэк": None,
        "Категория": "Дом и ремонт",
        "MCC": 5211.0,
        "Описание": "МаксидоМ",
        "Бонусы (включая кэшбэк)": 40,
        "Округление на инвесткопилку": 0,
        "Сумма операции с округлением": 2000.0
    },
    {
        "Дата операции": "31.05.2018 19:17:56",
        "Дата платежа": "01.06.2018",
        "Номер карты": "*7197",
        "Статус": "OK",
        "Сумма операции": -174.0,
        "Валюта операции": "RUB",
        "Сумма платежа": -174.0,
        "Валюта платежа": "RUB",
        "Кэшбэк": None,
        "Категория": "Дом и ремонт",
        "MCC": 5211.0,
        "Описание": "МаксидоМ",
        "Бонусы (включая кэшбэк)": 3,
        "Округление на инвесткопилку": 0,
        "Сумма операции с округлением": 174.0
    }
]


@patch('tests.test_reports.spending_by_category')
def test_spending_by_category(mock_spending_by_category):
    # Настроим возврат значения для мока
    mock_spending_by_category.return_value = expected_result

    # Тестовые данные
    datetime_str = '2018-06-18'
    date = datetime.strptime(datetime_str, "%Y-%m-%d")
    cat = 'Дом и ремонт'

    # Вызовем замокированную функцию
    actual_result = spending_by_category(df_to_func, cat, date)

    # Сравним фактический результат с ожидаемым
    assert actual_result == expected_result

